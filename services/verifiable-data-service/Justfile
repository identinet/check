#!/usr/bin/env -S just --justfile
# Documentation: https://just.systems/man/en/
# Documentation: https://www.nushell.sh/book/

import '../../justlib/lib.just'

DIST_FOLDER := "target"

# Print this help
default:
    @just -l

# Continuously run and build application for development purposes
[group('development')]
dev: githooks
    #!/usr/bin/env nu
    cargo watch -w src -x run

# Fast check to verify that the codes still compiles
[group('development')]
check:
    cargo check --all-targets --features=fail-on-warnings

# Continuously verify that the codes still compiles
[group('development')]
dev-check: githooks
    cargo watch -w src -x check

# Build release version of application
[group('development')]
build: test
    cargo build --release --features=fail-on-warnings

# Build debug version of application
[group('development')]
dev-build: githooks
    cargo build

# Test application
[group('development')]
test tests='':
    cargo test --features=fail-on-warnings {{ tests }}

# Continuously test application
[group('development')]
dev-test tests='': githooks
    #   - no `--fail-on-warnings` to allow for easier debugging
    #   - `--nocapture` to allow print!(...) output
    # - `RUST_BACKTRACE=1` shows reasons for failing tests
    RUST_BACKTRACE=1 cargo watch -w src -x 'test {{ tests }} -- --nocapture'

# Lint code
[group('linter')]
lint:
    cargo clippy -- -D warnings

# Lint code and fix issues
[group('linter')]
lint-fix:
    cargo clippy --fix --allow-staged

# Generate and open documentation
[group('documentation')]
docs:
    cargo doc --open

# Update dependencies
[group('development')]
update-deps:
    cargo update

# Update repository
[group('development')]
update-repo:
    git pull --rebase
    git submodule update --init --recursive

_bump_files CURRENT_VERSION NEW_VERSION:
    #!/usr/bin/env nu
    let manifest = (open manifest.json)
    open manifest.json | upsert version "{{ NEW_VERSION }}" | save -f manifest.json; git add manifest.json
    open Cargo.toml | upsert package.version "{{ NEW_VERSION }}" | to toml | lines | insert 0 "# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html" | to text | collect | save -f Cargo.toml; git add Cargo.toml
    open openapi.yaml | upsert info.version "{{ NEW_VERSION }}" | to yaml | lines | insert 0 "# OpenAPI Specification Explained: https://learn.openapis.org/specification/\n Documentation: https://spec.openapis.org/oas/v3.1.1.html\n Learning OpenAPI: https://redoc.ly/docs/resources/learning-openapi/\n HTTP status codes: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n HTTP methods: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods" | to text | collect | save -f openapi.yaml; git add openapi.yaml
    cargo update $manifest.name; git add Cargo.lock

# Remove unused dependencies (requires nightly version of compiler)
[group('development')]
clean-udeps:
    cargo udeps

# Find duplicate versions of dependencies
[group('development')]
clean-dups:
    cargo tree --duplicate

# Find bloat in the executable
[group('development')]
clean-bloat:
    cargo bloat --release --crates

# Clean build folder
[group('development')]
clean:
    @rm -rvf "{{ DIST_FOLDER }}"
